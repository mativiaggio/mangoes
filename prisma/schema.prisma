generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Notification Notification[]
  Product      Product[]
  Category     Category[]

  @@index([agencyId])
}

model Permissions {
  id           String     @id @default(uuid())
  email        String
  subAccountId String
  access       Boolean
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  agencyLogo       String
  companyEmail     String
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  users            User[]
  SubAccount       SubAccount[]
  SidebarOption    AgencySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  Products         Product[]
  Categories       Category[]
  Website          Website?  @relation(name: "AgencyToWebsite")
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  Contact          Contact[]
  Notification     Notification[]

  @@index([agencyId])
}

model Contact {
  id           String     @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  subAccountId String?
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model Notification {
  id           String      @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  agencyId             String?  @unique
  Agency               Agency?  @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String
  price        Float    @default(0.0)
  categoryId   String
  stock        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agencyId     String
  userId       String
  isActive     Boolean  @default(true)
  featured     Boolean  @default(false)
  productImage String
  User         User     @relation(fields: [userId], references: [id])
  Agency       Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([name])
  @@index([categoryId])
  @@index([userId])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  agencyId  String
  userId    String
  Agency    Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id])
  Product   Product[]

  @@index([name])
  @@index([agencyId])
  @@index([userId])
}

model Website {
  id           String   @id @default(uuid())
  websiteLogo  String   @default("")
  name         String
  description  String
  domain       String   @unique
  template     Temaplte
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agencyId     String   @unique // Campo único para la relación uno a uno
  userId       String
  isActive     Boolean  @default(true)
  Agency       Agency   @relation(name: "AgencyToWebsite", fields: [agencyId], references: [id]) // Definición de la relación

  @@index([name])
  @@index([agencyId])
  @@index([userId])
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
  rocket
  archive
  list
  packageOpen
  handCoins
  fileInput
  fileOutput
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

enum Temaplte {
  DEFAULT
}
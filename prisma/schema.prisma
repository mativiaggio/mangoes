generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String         @id @default(cuid())
  name                  String
  image                 String?
  email                 String         @unique
  emailVerified         DateTime?
  password              String?
  role                  Role           @default(SUBACCOUNT_USER)
  userRole              UserRole       @default(USER)
  isTwoFactorEnabled    Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  agencyId              String?
  Agency                Agency?        @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  Permissions           Permissions[]
  Notification          Notification[]
  Product               Product[]
  Category              Category[]
  accounts              Account[]
  // sessions      Session[]
  // Authenticator Authenticator[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([agencyId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Permissions {
  id           String     @id @default(cuid())
  email        String
  subAccountId String
  access       Boolean
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(cuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  agencyLogo       String
  companyEmail     String
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  users            User[]
  SubAccount       SubAccount[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  Products         Product[]
  Categories       Category[]
  Website          Website?  @relation(name: "AgencyToWebsite")
}

model SubAccount {
  id               String                    @id @default(cuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions      Permissions[]
  Contact          Contact[]
  Notification     Notification[]

  @@index([agencyId])
}

model Contact {
  id           String     @id @default(cuid())
  name         String
  email        String
  phone        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Invitation {
  id       String           @id @default(cuid())
  email    String           @unique
  agencyId String
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model Notification {
  id           String      @id @default(cuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Subscription {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  price                String?
  active               Boolean  @default(false)
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  planId               String?  @unique
  agencyId             String?  @unique
  plan                 Plan?    @relation(fields: [planId], references: [id], onDelete: Cascade)
  Agency               Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model Plan {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String
  description      String
  price            String
  features         String[]

  @@index([name])
  Subscription Subscription[]
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String
  price           Float       @default(0.0)
  categoryId      String
  stock           Int         @default(0)
  unlimitedStock  Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  agencyId        String
  userId          String
  isActive        Boolean     @default(true)
  featured        Boolean     @default(false)
  productImage    String
  User            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency          Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Category        Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([name])
  @@index([categoryId])
  @@index([userId])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  agencyId  String
  userId    String
  Agency    Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product   Product[]

  @@index([name])
  @@index([agencyId])
  @@index([userId])
}

model Website {
  id           String   @id @default(cuid())
  websiteLogo  String   @default("")
  name         String
  description  String
  domain       String   @unique
  industry     Industry @default(ECOMMERCE)
  template     Temaplte
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agencyId     String   @unique // Campo único para la relación uno a uno
  userId       String
  isActive     Boolean  @default(true)
  Agency       Agency   @relation(name: "AgencyToWebsite", fields: [agencyId], references: [id], onDelete: Cascade) // Definición de la relación

  @@index([name])
  @@index([agencyId])
  @@index([userId])
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
  rocket
  archive
  list
  packageOpen
  handCoins
  fileInput
  fileOutput
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Temaplte {
  DEFAULT
}

enum Industry {
  ECOMMERCE
  RESTAURANT
}